buildscript {
    ext {
        springBootVersion = '3.5.1'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.github.node-gradle:gradle-node-plugin:7.1.0")
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    repositories {
        mavenCentral()
    }

    configurations {
        testArtifacts
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    dependencies {
        compileOnly('org.projectlombok:lombok')
        annotationProcessor('org.projectlombok:lombok')
        testCompileOnly('org.projectlombok:lombok')
        testAnnotationProcessor('org.projectlombok:lombok')
        implementation('org.mapstruct:mapstruct:1.6.3')
        annotationProcessor('org.mapstruct:mapstruct-processor:1.6.3')
        annotationProcessor('org.projectlombok:lombok-mapstruct-binding:0.2.0')
        developmentOnly('org.springframework.boot:spring-boot-docker-compose')
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('io.rest-assured:rest-assured')
        testImplementation('org.springframework.boot:spring-boot-testcontainers')
        testImplementation('org.testcontainers:postgresql')
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    ext {
        projectName = "$rootProjectName-$project.name"
    }

    springBoot {
        mainClass = 'tms.octopus.octopus_tms.base.OctopusTmsApplication'
    }

    bootRun {
        enabled = false
    }

    bootBuildImage {
        enabled = false
    }

    tasks.register('testJar', Jar) {
        dependsOn testClasses
        from sourceSets.test.output
        archiveClassifier.set('tests')
    }

    artifacts {
        testArtifacts testJar
    }
}

project(':web') {
    apply plugin: 'com.github.node-gradle.node'

    bootRun {
        environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
        workingDir rootProject.projectDir
        enabled = true
    }

    bootBuildImage {
        enabled = true
    }

    node {
        download.set(true)
        version.set('22.16.0')
        nodeProjectDir.set(file("${project.projectDir}/.."))
    }

    tasks.register('npmRunBuild', NpmTask) {
        args = ['run', 'build']
        dependsOn npmInstall

        inputs.files(fileTree('../node_modules'))
        inputs.files(fileTree('../base/src/main/webapp'))
        inputs.files(fileTree('../core/src/main/webapp'))
        inputs.files(fileTree('../load/src/main/webapp'))
        inputs.files(fileTree('../broker/src/main/webapp'))
        inputs.files(fileTree('../shipper/src/main/webapp'))
        inputs.files(fileTree('../carrier/src/main/webapp'))
        inputs.files(fileTree('../financial/src/main/webapp'))
        inputs.files(fileTree('../web/src/main/webapp'))
        inputs.file('../.env')
        inputs.file('../package.json')
        inputs.file('../tsconfig.json')
        inputs.file('../webpack.config.js')
        outputs.dir(layout.buildDirectory.dir('resources/main/static'))
    }

    processResources {
        dependsOn npmRunBuild
    }

    dependencies {
        api project(':broker')
        api project(':shipper')
        api project(':carrier')
        api project(':financial')

        testImplementation project(path: ':base', configuration: 'testArtifacts')
    }
}

project(':financial') {
    dependencies {
        api project(':load')

        testImplementation project(path: ':base', configuration: 'testArtifacts')
        testImplementation project(path: ':core', configuration: 'testArtifacts')
    }
}

project(':carrier') {
    dependencies {
        api project(':load')

        testImplementation project(path: ':base', configuration: 'testArtifacts')
        testImplementation project(path: ':core', configuration: 'testArtifacts')
    }
}

project(':shipper') {
    dependencies {
        api project(':load')

        testImplementation project(path: ':base', configuration: 'testArtifacts')
        testImplementation project(path: ':core', configuration: 'testArtifacts')
    }
}

project(':broker') {
    dependencies {
        api project(':load')

        testImplementation project(path: ':base', configuration: 'testArtifacts')
        testImplementation project(path: ':core', configuration: 'testArtifacts')
    }
}

project(':load') {
    dependencies {
        api project(':core')

        testImplementation project(path: ':base', configuration: 'testArtifacts')
        testImplementation project(path: ':core', configuration: 'testArtifacts')
    }
}

project(':core') {
    dependencies {
        api project(':base')

        testImplementation project(path: ':base', configuration: 'testArtifacts')
    }
}

project(':base') {
    dependencies {
        api('org.springframework.boot:spring-boot-starter-web')
        api('org.springframework.boot:spring-boot-starter-validation')
        api('org.springframework.boot:spring-boot-starter-security')
        api('com.auth0:java-jwt:4.5.0')
        api('org.springframework.boot:spring-boot-starter-data-jpa')
        runtimeOnly('org.postgresql:postgresql')
        api('org.flywaydb:flyway-core')
        api('org.flywaydb:flyway-database-postgresql')
        api('io.github.wimdeblauwe:error-handling-spring-boot-starter:4.6.0')
        api('org.springframework.boot:spring-boot-starter-thymeleaf')
        api('org.springframework.boot:spring-boot-starter-mail')
        api('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6')
        api('org.springframework.boot:spring-boot-starter')
        api('org.springframework.boot:spring-boot-starter-cache')
        api('org.springframework.boot:spring-boot-starter-websocket')
        api('org.springframework.kafka:spring-kafka')
        api('com.amazonaws:aws-java-sdk-s3:1.12.787')
        api('io.prometheus:simpleclient_bom')
        api('org.springframework.boot:spring-boot-starter-aop')
    }
}
